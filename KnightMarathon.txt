This is answer of https://www.acmicpc.net/problem/14998 question

I make two kinds of knight marathon.
First one judge the cross line between start location and capital. Those points can express as right triangle.
It compares each diagonal line and knight's move every repetition. But this consume lots of memory.
So I make Second one.
It focus in pattern. In triangle, the long side is named as Yl, and the other is named as Xl. 
From the start location, Knight moves y side as 2, and x side as 1 until capital and current location become a right isosceles triangle.
After that, Knight can move y side 3 and x side 3 in two behavior.
We can find out the answer with some caculate.
But I need to look up exception more.
-----------------------10.15---------------------------
If we find the intersection of a straight line with slope 2 at the end point and a straight line with slope 1/2 at the start point, I thought that the number of movements would be the same as a result.
But not actually.
May be hybrid of first and second would be the answer.
-------------------------10.19--------------------------
I visualize move of the knight, and try to make some kind of structure.
I make 8 kinds of moves as array. Those moves make map 1 to 0, then sum of each column would change. It means knight moves within the allowed area.
I need to normalize more.
------------------------------------------------------------
나이트의 위치와 수도의 위치를 꼭짓점으로 가지는 직각 삼각형을 생각하자
나이트 특유의 움직임을 생각하여 일반식을 세우려고 했다.

직각 삼각형의 세로변 길이를 m, 가로변 길이를 n이라고 하자
가로 두칸, 세로 한칸의 나이트 이동 횟수를 a라고 하고
세로 두칸, 가로 한칸의 나이트 이동 횟수를 b라고 하자

체스판이라는 특성상 움직이는 거리를 고려해야 하는데,
출발시점을 제외하고 이전 도착점은 지금의 시작점이다.
이를 통해 최대한 삼각형의 빗변을 따라 움직이는 최단거리의 경우 상관관계를 알수 있는데

2*a + b == m - 1
2*b + a == n - 1
임을 알수 있다.

해당 연립방정식을 통해 얻을수 있는 여러 조건을 아래에 나열한다
a - b == m - n
a == (2*m-n-1)/3
b == (2*n-m-1)/3
이때, a,b 는 0 이상의 정수이므로 위의 계산식에 나머지가 없는 경우를 찾아야 한다.

위의 식을 통해 예제를 뽑아낸 후, 어느 규칙을 찾을수 있었는데,
m == k*N + 1
n == l*N +1
(2*k-l)%3 == 0
(2*l-k)%3 == 0
과 같은 형태를 가진다는 것이었다.

이 시점에서 마주친 문제를 아래에 기술한다.
모든 직각 삼각형이 내가 세운 나이트의 움직임에 맞아떨어지지는 않는다.
간단하게 생각할수 있는 것은 출발점으로부터 맞아떨어지는 위치로 이동시켜놓고 구하면 되지 않을까 싶었지만
어떻게 그 위치를 구할수 있을지 알 길이 없었다.
