This is answer of https://www.acmicpc.net/problem/14998 question

I make two kinds of knight marathon.
First one judge the cross line between start location and capital. Those points can express as right triangle.
It compares each diagonal line and knight's move every repetition. But this consume lots of memory.
So I make Second one.
It focus in pattern. In triangle, the long side is named as Yl, and the other is named as Xl. 
From the start location, Knight moves y side as 2, and x side as 1 until capital and current location become a right isosceles triangle.
After that, Knight can move y side 3 and x side 3 in two behavior.
We can find out the answer with some caculate.
But I need to look up exception more.
-----------------------10.15---------------------------
If we find the intersection of a straight line with slope 2 at the end point and a straight line with slope 1/2 at the start point, I thought that the number of movements would be the same as a result.
But not actually.
May be hybrid of first and second would be the answer.
-------------------------10.19--------------------------
I visualize move of the knight, and try to make some kind of structure.
I make 8 kinds of moves as array. Those moves make map 1 to 0, then sum of each column would change. It means knight moves within the allowed area.
I need to normalize more.
------------------------------------------------------------
나이트의 위치와 수도의 위치를 꼭짓점으로 가지는 직각 삼각형을 생각하자
나이트 특유의 움직임을 생각하여 일반식을 세우려고 했다.

직각 삼각형의 세로변 길이를 m, 가로변 길이를 n이라고 하자
가로 두칸, 세로 한칸의 나이트 이동 횟수를 a라고 하고
세로 두칸, 가로 한칸의 나이트 이동 횟수를 b라고 하자

체스판이라는 특성상 움직이는 거리를 고려해야 하는데,
출발시점을 제외하고 이전 도착점은 지금의 시작점이다.
이를 통해 최대한 삼각형의 빗변을 따라 움직이는 최단거리의 경우 상관관계를 알수 있는데

2*a + b == m - 1
2*b + a == n - 1
임을 알수 있다.

해당 연립방정식을 통해 얻을수 있는 여러 조건을 아래에 나열한다
a - b == m - n
a == (2*m-n-1)/3
b == (2*n-m-1)/3
이때, a,b 는 0 이상의 정수이므로 위의 계산식에 나머지가 없는 경우를 찾아야 한다.

위의 식을 통해 예제를 뽑아낸 후, 어느 규칙을 찾을수 있었는데,
m == k*N + 1
n == l*N +1
(2*k-l)%3 == 0
(2*l-k)%3 == 0
과 같은 형태를 가진다는 것이었다.

이 시점에서 마주친 문제를 아래에 기술한다.
모든 직각 삼각형이 내가 세운 나이트의 움직임에 맞아떨어지지는 않는다.
간단하게 생각할수 있는 것은 출발점으로부터 맞아떨어지는 위치로 이동시켜놓고 구하면 되지 않을까 싶었지만
어떻게 그 위치를 구할수 있을지 알 길이 없었다.
---------------------------------------------------------------------------------------
위의 방법을 가지고 여러가지 경우를 만들어 보았다.
맞아떨어지는 경우를 뽑아놓고 보니 일정한 규칙을 찾을수 있었다.
(1,1)
(2,3)
(3,2),(3,5)
(4,4),(4,7)
(5,3),(5.6),(5,9)
..........
만들어진 직각삼각형의 세로변, 가로변 칸의 개수를 비교하여
작은것을 n, 큰 것을 m 이라고 하면
귀납적 근거에 의거해 n 과 m 사이의 상관관계를 표현할수 있다.
m=[n//2 + 2 - n%2, 2*n -1] (등차가 3인 범위)
해당 n,m값의 경우가 맞아 떨어지는 범위이다.

맞아떨어지지 않는 경우 크게 두가지로 나눌수 있는데
입력된 m 값이 (2*n-1) 즉 맞아떨어지는 최댓값 이하인가 초과인가로 생각해볼수 있다.

이하인 경우
이것 또한 여러가지 경우를 직접 뽑아보았다.
원래는 맞아떨어지는 경우의 배열을 만들고 그 중에 m에 가까운 값을 탐색하려고 했는데,
값이 커지니 속도가 감당이 안되고, 또 굳이 만들필요가 없다는 것을 알게되었다.
맞아떨어지는 최소값은 (n//2 + 2 - n%2), 최댓값은 (2*n -1) 이고 등차가 3이다.

ex)
n=6, m=[5,11]
입력받은 값 k, 움직인 횟수 l
(k,l)
(5,3)
(6,4)
(7,5)
(8,4)
(9,5)
(10,6)
(11,5)
...
이를 통해 도출된 규칙은
(k-m) // 3 (이때 m은 k 와 가장 가깝고 동시에 k보다 작음) 으로 제일 가까운 맞아떨어지는 위치를 찾고
맞아떨어지는 경우의 이동횟수는 구할수 있으니 그 값에 (k-m)%3 을 더하면 우리가 원하는 값을 얻을수 있다.
l=(n + (n//2 + 2 - n%2 + 3*몫) - 2) // 3 + (k - (n//2 + 2 - n%2)) % 3

초과한 경우
이 뜻은 특정 방향으로 길쭉한 직각삼각형이 되는 것을 의미하는데, 나이트의 2번의 움직임으로 한쪽으로 4칸을 이동하는 것을 이용했다.

ex)
n=4, m=[4,7]
입력받은 값 k, 이동횟수 l

(k,l)
(7,3)
(8,4)
(9,5)
(10,6)
(11,5)
(12,6)
(13,7)
(14,8)
(15,7)
(16,8)
(17,9)
(18,10)
(19,9)
...
이를 통해 도출된 규칙은
(k-m)//4 (이때 m은 맞아떨어지는 최댓값) 을 구한다
m 일때 이동횟수를 구하고, 이를 max 라고 하자
l=max + 2*((k-m)//4) + ((k-m)%4)
임을 알수 있다.

몇가지 예외사항만 제외하면 귀납적으로 원하는 값을 얻을수 있었다.

새로운 문제는 이것의 반례가 존재한다는 것이다.
반례를 찾는 것이 다음 과제라고 할수 있겠다.